---
title: "Problem Set 4"
author: "Rajvi Jasani"
format: 
  html: 
    toc: true
    embed-resources: true
  pdf: default
---

## GitHub Repository

This is the link to my GitHub repository <https://github.com/rajvijasani/STATS506-Problem-Set-4.git>

## Problem 1 - Tidyverse
*Documentation reference:* <https://cran.r-project.org/web/packages/nycflights13/nycflights13.pdf>
```{r}
#| message: false
library(tidyverse)
library(nycflights13)
```
a.

Departure
```{r}
flights %>%
  group_by(origin) %>%
  summarise(mean_delay = round(mean(dep_delay, na.rm = TRUE), 3),
            median_delay = median(dep_delay, na.rm = TRUE)) %>%
  ungroup() %>%
  left_join(airports, by = c("origin" = "faa")) %>%
  select(name, mean_delay, median_delay) %>%
  arrange(desc(mean_delay))
```
Arrival
```{r}
flights %>%
  group_by(dest) %>%
  summarise(
    mean_delay = round(mean(arr_delay, na.rm = TRUE), 3),
    median_delay = median(arr_delay, na.rm = TRUE),
    num_flights = n()
  ) %>%
  ungroup() %>%
  filter(num_flights >= 10) %>%
  left_join(airports, by = c("dest" = "faa")) %>%
  # to rename airport name with
  # faa code where name is NA
  mutate(name = if_else(is.na(name), dest, name)) %>%
  select(name, mean_delay, median_delay) %>%
  arrange(desc(mean_delay)) %>%
  print(n = count(.))
```
*Attribution of source:* Used ChatGPT for help with join and renaming airports with faa codes that have NA values in names.

b.

There is a speed column in the planes table, but the values haven't been populated so we calculate speed on our own.
```{r}
flights %>%
  left_join(planes, by = "tailnum") %>%
  mutate(time = air_time / 60, # converting from minutes to hours
         flight_speed = distance / time) %>%
  group_by(model) %>% # different tail number planes can be of same model
  summarise(avg_speed = mean(flight_speed, na.rm = TRUE),
            num_flights = n()) %>%
  filter(avg_speed == max(avg_speed, na.rm = TRUE))
```

## Problem 2 - `get_temp()`
```{r}
nnmaps <- read.csv("data/chicago-nmmaps.csv")
#' Function to get average temperature based on user's query
#'
#' @param month Month, either a numeric 1-12 or a string
#' @param year A numeric year
#' @param data The data set to obtain data from
#' @param celsius Logically indicating whether the results should be in celsius. Default FALSE
#' @param average_fn A function to compute the average. Default mean
#'
#' @return average temperature for a given month
get_temp <- function(month, year, data, celsius = FALSE, average_fn = mean) {
  # sanitizing month input
  if (month %>% is.numeric()) {
    if (month < 1 || month > 12) {
      stop("Month should be between 1 and 12")
    }
  }
  else if (month %>% is.character()) {
    # taking into consideration month abbreviations (index 1-12)
    # and full names (index 13-24)
    all_months <- c(month.abb, month.name) %>% tolower()
    # getting index of match if exists
    month <- match(tolower(month), all_months)
    if (month %>% is.na()) {
      stop("Invalid month string")
    }
    else if (month > 12) {
      # converting month index for full name from 13-24 to 1-12
      month <- month %>% `-` (12)
    }
  }
  else {
    stop("Month should be numeric or string only")
  }
  
  # sanitizing year input
  if (!year %>% is.numeric()) {
    stop("Year must be numeric")
  }
  if (year < min(data$year) || year > max(data$year)) {
    stop("Year not in range")
  }
  
  # querying
  result <- data %>%
    select(year, month_numeric, temp) %>%
    rename(year_data = year) %>%
    filter(year_data == year, month_numeric == month) %>%
    summarise(avg_temp = average_fn(temp)) %>%
    mutate(avg_temp = ifelse(celsius, (avg_temp - 32) * 5 / 9, avg_temp)) %>%
    as.numeric()
  
  return(result)
}
```
*Attribution of source:* Asked ChatGPT for possible methods to sanitize month input when month is as string that can be a full name or an abbreviation.
```{r}
tryCatch({
  print(get_temp("Apr", 1999, data = nnmaps))
}, error = function(e) {
  message("Error: ", e$message)
})
tryCatch({
  print(get_temp("Apr", 1999, data = nnmaps, celsius = TRUE))
}, error = function(e) {
  message("Error: ", e$message)
})
tryCatch({
  print(get_temp(10, 1998, data = nnmaps, average_fn = median))
}, error = function(e) {
  message("Error: ", e$message)
})
tryCatch({
  print(get_temp(13, 1998, data = nnmaps))
}, error = function(e) {
  message("Error: ", e$message)
})
tryCatch({
  print(get_temp(2, 2005, data = nnmaps))
}, error = function(e) {
  message("Error: ", e$message)
})
tryCatch({
  print(get_temp(
    "November",
    1999,
    data = nnmaps,
    celsius = TRUE,
    average_fn = function(x) {
      x %>% sort -> x
      x[2:(length(x) - 1)] %>% mean %>% return
    }
  ))
}, error = function(e) {
  message("Error: ", e$message)
})
```
*Attribution of source:* Asked ChatGPT for possible solution when quarto document was not rendering due to error when function is given wrong input. ChatGPT suggested using try-catch blocks to handle errors.

## Problem 3 - Visualization
```{r}
library(ggplot2)
library(dplyr)
df <- read.csv("data/df_for_ml_improved_new_market.csv")
```
a.
```{r}
df_avg_price <- df %>%
  group_by(year) %>%
  summarise(avg_usd_year = mean(price_usd, na.rm = TRUE)) %>%
  ungroup() %>%
  select(year, avg_usd_year)

print(ggplot(df_avg_price, aes(x = year, y = avg_usd_year)) +
  geom_line(color = "blue") +
  labs(title = "Average Sales Price in USD Over Time", x = "Year", y = "Average Price (USD)") +
  theme(plot.title = element_text(hjust = 0.5)))
```
The line plot is the simplest and most informative graph to look at a trend. Looking at the graph here, we see that there is an overall increase in average sales price over the years until 2008 after which we can notice an overall decline. The increase and decrease in the prices is not constant and varies over period of years.

*Attribution of source:* Used ChatGPT to find functions to make the graph look good such a theme().

b.
```{r}
df_long <- df %>%
  pivot_longer(cols = starts_with("Genre"),
               names_to = "Genre",
               values_to = "Presence") %>%
  filter(Presence == 1)

df_genre_distribution <- df_long %>%
  count(year, Genre)

print(ggplot(df_genre_distribution, aes(x = factor(year), y = n, fill = Genre)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(title = "Genre Distribution Over Years", x = "Year", y = "Count") +
  theme(plot.title = element_text(hjust = 0.5)))
```

A stacked bar plot with different genres colored differently can help easily spot the trend. It is quite clear from this graph that the distribution of genre of sales changes over the years but differs from genre to genre. At the beginning, the sales for each genre were quite low. With time, we see there is an increase in sales of sculptures and photographs. However, they both seem to have a steady amount of sales in the last half, between the years 2005-2010. The other genres also have increase in sales but the count isn't as major as photography and sculptures. One interesting observation I noticed was that the sales of paintings genre looks almost equal to other genre. This could be due to various reasons and should be investigated further.

*Attribution of source:* Asked ChatGPT how to combine the different genre columns into 1 column (opposite of factoring). Looked at ggplot2 documentation <https://ggplot2.tidyverse.org/reference/> for available geom functions.

c.
```{r}
df_genre_price <- df_long %>%
  group_by(year, Genre) %>%
  summarise(avg_price = mean(price_usd, na.rm = TRUE)) %>%
  ungroup() %>%
  select(year, avg_price, Genre)

print(ggplot(df_genre_price, aes(x = year, y = avg_price, color = Genre)) +
  geom_line(linewidth = 1) +
  labs(title = "Impact of Genre on Sales Price Over Years", x = "Year", y = "Average Price (USD)")  +
  theme(plot.title = element_text(hjust = 0.5)))
```
These plots show the demand of each genre through their sale prices over years. We can identify that some genres are more susceptible to market trends/popularities, like Photography and Print, while others are more stable. When there is an increase in demand of a particular genre, like Photography peaking in 2008, the total sale prices also increased dramatically, which can be verified from the graph in part a. Similarly, the rise and falls seen in graph in part a can be justified and understood by looking at these plots. We can also verify that the sales of paintings genre looks almost equal to other genre as their line plots are overlapping for up till a point.

*Attribution of source:* Looked at ggplot2 documentation <https://ggplot2.tidyverse.org/reference/> for available geom functions.
