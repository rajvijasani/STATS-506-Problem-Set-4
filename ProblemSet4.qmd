---
title: "Problem Set 4"
author: "Rajvi Jasani"
format: 
  html:
    toc: true
    embed-resources: true
  pdf: default
---

## GitHub Repository

This is the link to my GitHub repository <https://github.com/rajvijasani/STATS506-Problem-Set-4.git>

## Problem 1 - Tidyverse
*Documentation reference:* <https://cran.r-project.org/web/packages/nycflights13/nycflights13.pdf>
```{r}
#| message: false
library(tidyverse)
library(nycflights13)
```
a.

Departure
```{r}
flights %>%
  group_by(origin) %>%
  summarise(mean_delay = round(mean(dep_delay, na.rm = TRUE), 3),
            median_delay = median(dep_delay, na.rm = TRUE)) %>%
  ungroup() %>%
  left_join(airports, by = c("origin" = "faa")) %>%
  select(name, mean_delay, median_delay) %>%
  arrange(desc(mean_delay))
```
Arrival
```{r}
flights %>%
  group_by(dest) %>%
  summarise(
    mean_delay = round(mean(arr_delay, na.rm = TRUE), 3),
    median_delay = median(arr_delay, na.rm = TRUE),
    num_flights = n()
  ) %>%
  ungroup() %>%
  filter(num_flights >= 10) %>%
  left_join(airports, by = c("dest" = "faa")) %>%
  # to rename airport name with
  # faa code where name is NA
  mutate(name = if_else(is.na(name), dest, name)) %>%
  select(name, mean_delay, median_delay) %>%
  arrange(desc(mean_delay)) %>%
  print(n = count(.))
```
*Attribution of source:* Used ChatGPT for help with join and renaming airports with faa codes that have NA values in names.

b.

There is a speed column in the planes table, but the values haven't been populated so we calculate speed on our own.
```{r}
flights %>%
  left_join(planes, by = "tailnum") %>%
  mutate(time = air_time / 60, # converting from minutes to hours
         flight_speed = distance / time) %>%
  group_by(model) %>% # different tail number planes can be of same model
  summarise(avg_speed = mean(flight_speed, na.rm = TRUE),
            num_flights = n()) %>%
  filter(avg_speed == max(avg_speed, na.rm = TRUE))
```

## Problem 2 - `get_temp()`
```{r}
nnmaps <- read.csv("data/chicago-nmmaps.csv")
#' Function to get average temperature based on user's query
#'
#' @param month Month, either a numeric 1-12 or a string
#' @param year A numeric year
#' @param data The data set to obtain data from
#' @param celsius Logically indicating whether the results should be in celsius. Default FALSE
#' @param average_fn A function to compute the average. Default mean
#'
#' @return average temperature for a given month
get_temp <- function(month, year, data, celsius = FALSE, average_fn = mean) {
  # sanitizing month input
  if (month %>% is.numeric()) {
    if (month < 1 || month > 12) {
      stop("Month should be between 1 and 12")
    }
  }
  else if (month %>% is.character()) {
    # taking into consideration month abbreviations (index 1-12)
    # and full names (index 13-24)
    all_months <- c(month.abb, month.name) %>% tolower()
    # getting index of match if exists
    month <- match(tolower(month), all_months)
    if (month %>% is.na()) {
      stop("Invalid month string")
    }
    else if (month > 12) {
      # converting month index for full name from 13-24 to 1-12
      month <- month %>% `-` (12)
    }
  }
  else {
    stop("Month should be numeric or string only")
  }
  
  # sanitizing year input
  if (!year %>% is.numeric()) {
    stop("Year must be numeric")
  }
  if (year < min(data$year) || year > max(data$year)) {
    stop("Year not in range")
  }
  
  # querying
  result <- data %>%
    select(year, month_numeric, temp) %>%
    rename(year_data = year) %>%
    filter(year_data == year, month_numeric == month) %>%
    summarise(avg_temp = average_fn(temp)) %>%
    mutate(avg_temp = ifelse(celsius, (avg_temp - 32) * 5 / 9, avg_temp)) %>%
    as.numeric()
  
  return(result)
}
```
*Attribution of source:* Asked ChatGPT for possible methods to sanitize month input when month is as string that can be a full name or an abbreviation.
```{r}
tryCatch({
  print(get_temp("Apr", 1999, data = nnmaps))
}, error = function(e) {
  message("Error: ", e$message)
})
tryCatch({
  print(get_temp("Apr", 1999, data = nnmaps, celsius = TRUE))
}, error = function(e) {
  message("Error: ", e$message)
})
tryCatch({
  print(get_temp(10, 1998, data = nnmaps, average_fn = median))
}, error = function(e) {
  message("Error: ", e$message)
})
tryCatch({
  print(get_temp(13, 1998, data = nnmaps))
}, error = function(e) {
  message("Error: ", e$message)
})
tryCatch({
  print(get_temp(2, 2005, data = nnmaps))
}, error = function(e) {
  message("Error: ", e$message)
})
tryCatch({
  print(get_temp(
    "November",
    1999,
    data = nnmaps,
    celsius = TRUE,
    average_fn = function(x) {
      x %>% sort -> x
      x[2:(length(x) - 1)] %>% mean %>% return
    }
  ))
}, error = function(e) {
  message("Error: ", e$message)
})
```
*Attribution of source:* Asked ChatGPT for possible solution when quarto document was not rendering due to error when function is given wrong input. ChatGPT suggested using try-catch blocks to handle errors.
